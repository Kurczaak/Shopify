// Mocks generated by Mockito 5.1.0 from annotations
// in shopify_domain/test/src/product/algolia_product_searcher_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:algolia/algolia.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shopify_domain/core/network/network_info.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAlgolia_0 extends _i1.Fake implements _i2.Algolia {}

class _FakeAlgoliaMultiIndexesReference_1 extends _i1.Fake
    implements _i2.AlgoliaMultiIndexesReference {}

class _FakeAlgoliaIndexReference_2 extends _i1.Fake
    implements _i2.AlgoliaIndexReference {}

class _FakeAlgoliaIndexesSnapshot_3 extends _i1.Fake
    implements _i2.AlgoliaIndexesSnapshot {}

class _FakeAlgoliaQuerySnapshot_4 extends _i1.Fake
    implements _i2.AlgoliaQuerySnapshot {}

class _FakeAlgoliaQuery_5 extends _i1.Fake implements _i2.AlgoliaQuery {}

class _FakeAlgoliaIndexSettings_6 extends _i1.Fake
    implements _i2.AlgoliaIndexSettings {}

class _FakeAlgoliaSynonymsReference_7 extends _i1.Fake
    implements _i2.AlgoliaSynonymsReference {}

class _FakeAlgoliaObjectReference_8 extends _i1.Fake
    implements _i2.AlgoliaObjectReference {}

class _FakeAlgoliaBatch_9 extends _i1.Fake implements _i2.AlgoliaBatch {}

class _FakeAlgoliaTask_10 extends _i1.Fake implements _i2.AlgoliaTask {}

/// A class which mocks [Algolia].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlgolia extends _i1.Mock implements _i2.Algolia {
  MockAlgolia() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get applicationId =>
      (super.noSuchMethod(Invocation.getter(#applicationId), returnValue: '')
          as String);
  @override
  Map<String, String> get extraHeaders =>
      (super.noSuchMethod(Invocation.getter(#extraHeaders),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  List<String> get extraUserAgents =>
      (super.noSuchMethod(Invocation.getter(#extraUserAgents),
          returnValue: <String>[]) as List<String>);
  @override
  _i2.Algolia get instance => (super.noSuchMethod(Invocation.getter(#instance),
      returnValue: _FakeAlgolia_0()) as _i2.Algolia);
  @override
  _i2.AlgoliaMultiIndexesReference get multipleQueries =>
      (super.noSuchMethod(Invocation.getter(#multipleQueries),
              returnValue: _FakeAlgoliaMultiIndexesReference_1())
          as _i2.AlgoliaMultiIndexesReference);
  @override
  _i2.Algolia setHeader(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setHeader, [key, value]),
          returnValue: _FakeAlgolia_0()) as _i2.Algolia);
  @override
  _i2.AlgoliaIndexReference index(String? index) =>
      (super.noSuchMethod(Invocation.method(#index, [index]),
              returnValue: _FakeAlgoliaIndexReference_2())
          as _i2.AlgoliaIndexReference);
  @override
  _i3.Future<_i2.AlgoliaIndexesSnapshot> getIndices() =>
      (super.noSuchMethod(Invocation.method(#getIndices, []),
              returnValue: Future<_i2.AlgoliaIndexesSnapshot>.value(
                  _FakeAlgoliaIndexesSnapshot_3()))
          as _i3.Future<_i2.AlgoliaIndexesSnapshot>);
  @override
  _i3.Future<void> pushEvents(List<_i2.AlgoliaEvent>? events) =>
      (super.noSuchMethod(Invocation.method(#pushEvents, [events]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [AlgoliaQuery].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlgoliaQuery extends _i1.Mock implements _i2.AlgoliaQuery {
  MockAlgoliaQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Algolia get algolia => (super.noSuchMethod(Invocation.getter(#algolia),
      returnValue: _FakeAlgolia_0()) as _i2.Algolia);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String get encodedIndex =>
      (super.noSuchMethod(Invocation.getter(#encodedIndex), returnValue: '')
          as String);
  @override
  _i2.AlgoliaIndexReference reference() =>
      (super.noSuchMethod(Invocation.method(#reference, []),
              returnValue: _FakeAlgoliaIndexReference_2())
          as _i2.AlgoliaIndexReference);
  @override
  _i3.Future<_i2.AlgoliaQuerySnapshot> getObjects() =>
      (super.noSuchMethod(Invocation.method(#getObjects, []),
              returnValue: Future<_i2.AlgoliaQuerySnapshot>.value(
                  _FakeAlgoliaQuerySnapshot_4()))
          as _i3.Future<_i2.AlgoliaQuerySnapshot>);
  @override
  _i3.Future<_i2.AlgoliaQuerySnapshot> deleteObjects() =>
      (super.noSuchMethod(Invocation.method(#deleteObjects, []),
              returnValue: Future<_i2.AlgoliaQuerySnapshot>.value(
                  _FakeAlgoliaQuerySnapshot_4()))
          as _i3.Future<_i2.AlgoliaQuerySnapshot>);
  @override
  _i2.AlgoliaQuery search(String? value) =>
      (super.noSuchMethod(Invocation.method(#search, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery query(String? value) =>
      (super.noSuchMethod(Invocation.method(#query, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSimilarQuery(String? value) =>
      (super.noSuchMethod(Invocation.method(#setSimilarQuery, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery similarQuery(String? value) =>
      (super.noSuchMethod(Invocation.method(#similarQuery, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSearchableAttributes(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setSearchableAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributesForFaceting(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributesForFaceting, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setUnRetrievableAttributes(List<String>? value) => (super
      .noSuchMethod(Invocation.method(#setUnRetrievableAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributesToRetrieve(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributesToRetrieve, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRestrictSearchableAttributes(List<String>? value) =>
      (super.noSuchMethod(
          Invocation.method(#setRestrictSearchableAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFilters(String? value) =>
      (super.noSuchMethod(Invocation.method(#setFilters, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery filters(String? value) =>
      (super.noSuchMethod(Invocation.method(#filters, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFacetFilter(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setFacetFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery facetFilter(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#facetFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setOptionalFilter(String? value) =>
      (super.noSuchMethod(Invocation.method(#setOptionalFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setNumericFilter(String? value) =>
      (super.noSuchMethod(Invocation.method(#setNumericFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setTagFilter(String? value) =>
      (super.noSuchMethod(Invocation.method(#setTagFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSumOrFiltersScore(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setSumOrFiltersScore, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFacets(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setFacets, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMaxValuesPerFacet(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMaxValuesPerFacet, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFacetingAfterDistinct({bool? enable = true}) =>
      (super.noSuchMethod(
          Invocation.method(#setFacetingAfterDistinct, [], {#enable: enable}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSortFacetValuesBy(_i2.AlgoliaSortFacetValuesBy? value) =>
      (super.noSuchMethod(Invocation.method(#setSortFacetValuesBy, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributesToHighlight(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributesToHighlight, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributesToSnippet(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributesToSnippet, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setHighlightPreTag(String? value) =>
      (super.noSuchMethod(Invocation.method(#setHighlightPreTag, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setHighlightPostTag(String? value) =>
      (super.noSuchMethod(Invocation.method(#setHighlightPostTag, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSnippetEllipsisText(String? value) =>
      (super.noSuchMethod(Invocation.method(#setSnippetEllipsisText, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRestrictHighlightAndSnippetArrays(
          {bool? enable = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setRestrictHighlightAndSnippetArrays, [], {#enable: enable}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setPage(int? value) =>
      (super.noSuchMethod(Invocation.method(#setPage, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setHitsPerPage(int? value) =>
      (super.noSuchMethod(Invocation.method(#setHitsPerPage, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setOffset(int? value) =>
      (super.noSuchMethod(Invocation.method(#setOffset, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setLength(int? value) =>
      (super.noSuchMethod(Invocation.method(#setLength, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setPaginationLimitedTo(int? value) =>
      (super.noSuchMethod(Invocation.method(#setPaginationLimitedTo, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMinWordSizeFor1Typo(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMinWordSizeFor1Typo, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMinWordSizeFor2Typos(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMinWordSizeFor2Typos, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setTypoTolerance(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setTypoTolerance, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAllowTyposOnNumericTokens(bool? value) => (super
      .noSuchMethod(Invocation.method(#setAllowTyposOnNumericTokens, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDisableTypoToleranceOnAttributes(List<String>? value) =>
      (super.noSuchMethod(
          Invocation.method(#setDisableTypoToleranceOnAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDisableTypoToleranceOnWords(List<String>? value) => (super
      .noSuchMethod(Invocation.method(#setDisableTypoToleranceOnWords, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSeparatorsToIndex(String? value) =>
      (super.noSuchMethod(Invocation.method(#setSeparatorsToIndex, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAroundLatLng(String? value) =>
      (super.noSuchMethod(Invocation.method(#setAroundLatLng, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAroundLatLngViaIP(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setAroundLatLngViaIP, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAroundRadius(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setAroundRadius, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAroundPrecision(int? value) =>
      (super.noSuchMethod(Invocation.method(#setAroundPrecision, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMinimumAroundRadius(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMinimumAroundRadius, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setInsideBoundingBox(List<_i2.BoundingBox>? value) =>
      (super.noSuchMethod(Invocation.method(#setInsideBoundingBox, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setInsidePolygon(List<_i2.BoundingPolygonBox>? value) =>
      (super.noSuchMethod(Invocation.method(#setInsidePolygon, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setIgnorePlurals(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setIgnorePlurals, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRemoveStopWords(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setRemoveStopWords, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setCamelCaseAttributes(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setCamelCaseAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDecompoundedAttributes(dynamic value) => (super
      .noSuchMethod(Invocation.method(#setDecompoundedAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setkeepDiacriticsOnCharacters(String? value) => (super
      .noSuchMethod(Invocation.method(#setkeepDiacriticsOnCharacters, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setQueryLanguages(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setQueryLanguages, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setIndexLanguages(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setIndexLanguages, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setNaturalLanguages(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setNaturalLanguages, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setEnableRules({bool? enabled = false}) => (super
      .noSuchMethod(Invocation.method(#setEnableRules, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFilterPromotes({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setFilterPromotes, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRuleContexts(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setRuleContexts, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setEnablePersonalization({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setEnablePersonalization, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setPersonalizationImpact({int? value}) =>
      (super.noSuchMethod(
          Invocation.method(#setPersonalizationImpact, [], {#value: value}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setUserToken(String? value) =>
      (super.noSuchMethod(Invocation.method(#setUserToken, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setQueryType(_i2.QueryType? value) =>
      (super.noSuchMethod(Invocation.method(#setQueryType, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRemoveWordsIfNoResults(
          _i2.RemoveWordsIfNoResults? value) =>
      (super.noSuchMethod(
          Invocation.method(#setRemoveWordsIfNoResults, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAdvancedSyntax({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setAdvancedSyntax, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setOptionalWords(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setOptionalWords, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDisablePrefixOnAttributes(List<String>? value) => (super
      .noSuchMethod(Invocation.method(#setDisablePrefixOnAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDisableExactOnAttributes(List<String>? value) => (super
      .noSuchMethod(Invocation.method(#setDisableExactOnAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setExactOnSingleWordQuery(
          _i2.ExactOnSingleWordQuery? value) =>
      (super.noSuchMethod(
          Invocation.method(#setExactOnSingleWordQuery, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setNumericAttributesForFiltering({List<String>? value}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setNumericAttributesForFiltering, [], {#value: value}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAllowCompressionOfIntegerArray({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setAllowCompressionOfIntegerArray, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributeForDistinct(String? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributeForDistinct, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDistinct({dynamic value = 0}) =>
      (super.noSuchMethod(Invocation.method(#setDistinct, [], {#value: value}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setGetRankingInfo({bool? enabled = true}) =>
      (super.noSuchMethod(
          Invocation.method(#setGetRankingInfo, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setClickAnalytics({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setClickAnalytics, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAnalytics({bool? enabled = false}) => (super.noSuchMethod(
      Invocation.method(#setAnalytics, [], {#enabled: enabled}),
      returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAnalyticsTags(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAnalyticsTags, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSynonyms({bool? enabled = false}) => (super.noSuchMethod(
      Invocation.method(#setSynonyms, [], {#enabled: enabled}),
      returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setReplaceSynonymsInHighlight({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setReplaceSynonymsInHighlight, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMaxFacetHits(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMaxFacetHits, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setPercentileComputation({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setPercentileComputation, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributeCriteriaComputedByMinProximity(
          {bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setAttributeCriteriaComputedByMinProximity, [],
              {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setEnableABTest({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setEnableABTest, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
}

/// A class which mocks [AlgoliaIndexReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlgoliaIndexReference extends _i1.Mock
    implements _i2.AlgoliaIndexReference {
  MockAlgoliaIndexReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get index =>
      (super.noSuchMethod(Invocation.getter(#index), returnValue: '')
          as String);
  @override
  _i2.AlgoliaIndexSettings get settings => (super.noSuchMethod(
      Invocation.getter(#settings),
      returnValue: _FakeAlgoliaIndexSettings_6()) as _i2.AlgoliaIndexSettings);
  @override
  _i2.AlgoliaSynonymsReference get synonyms =>
      (super.noSuchMethod(Invocation.getter(#synonyms),
              returnValue: _FakeAlgoliaSynonymsReference_7())
          as _i2.AlgoliaSynonymsReference);
  @override
  _i2.Algolia get algolia => (super.noSuchMethod(Invocation.getter(#algolia),
      returnValue: _FakeAlgolia_0()) as _i2.Algolia);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String get encodedIndex =>
      (super.noSuchMethod(Invocation.getter(#encodedIndex), returnValue: '')
          as String);
  @override
  _i2.AlgoliaObjectReference object([String? path]) =>
      (super.noSuchMethod(Invocation.method(#object, [path]),
              returnValue: _FakeAlgoliaObjectReference_8())
          as _i2.AlgoliaObjectReference);
  @override
  _i3.Future<List<_i2.AlgoliaFacetValueSnapshot>> facetQuery(String? facetName,
          {String? params = r'',
          String? facetQuery = r'',
          int? maxFacetHits = 10}) =>
      (super.noSuchMethod(
              Invocation.method(#facetQuery, [
                facetName
              ], {
                #params: params,
                #facetQuery: facetQuery,
                #maxFacetHits: maxFacetHits
              }),
              returnValue: Future<List<_i2.AlgoliaFacetValueSnapshot>>.value(
                  <_i2.AlgoliaFacetValueSnapshot>[]))
          as _i3.Future<List<_i2.AlgoliaFacetValueSnapshot>>);
  @override
  _i2.AlgoliaBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeAlgoliaBatch_9()) as _i2.AlgoliaBatch);
  @override
  _i3.Future<_i2.AlgoliaTask> addObject(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#addObject, [data]),
              returnValue: Future<_i2.AlgoliaTask>.value(_FakeAlgoliaTask_10()))
          as _i3.Future<_i2.AlgoliaTask>);
  @override
  _i3.Future<_i2.AlgoliaTask> addObjects(List<Map<String, dynamic>>? objects) =>
      (super.noSuchMethod(Invocation.method(#addObjects, [objects]),
              returnValue: Future<_i2.AlgoliaTask>.value(_FakeAlgoliaTask_10()))
          as _i3.Future<_i2.AlgoliaTask>);
  @override
  _i3.Future<List<_i2.AlgoliaObjectSnapshot>> getObjectsByIds(
          [List<String>? objectIds = const []]) =>
      (super.noSuchMethod(Invocation.method(#getObjectsByIds, [objectIds]),
              returnValue: Future<List<_i2.AlgoliaObjectSnapshot>>.value(
                  <_i2.AlgoliaObjectSnapshot>[]))
          as _i3.Future<List<_i2.AlgoliaObjectSnapshot>>);
  @override
  _i3.Future<_i2.AlgoliaTask> clearIndex() =>
      (super.noSuchMethod(Invocation.method(#clearIndex, []),
              returnValue: Future<_i2.AlgoliaTask>.value(_FakeAlgoliaTask_10()))
          as _i3.Future<_i2.AlgoliaTask>);
  @override
  _i3.Future<_i2.AlgoliaTask> moveIndex({String? destination}) =>
      (super.noSuchMethod(
              Invocation.method(#moveIndex, [], {#destination: destination}),
              returnValue: Future<_i2.AlgoliaTask>.value(_FakeAlgoliaTask_10()))
          as _i3.Future<_i2.AlgoliaTask>);
  @override
  _i3.Future<_i2.AlgoliaTask> copyIndex(
          {String? destination, List<_i2.CopyScope>? scopes}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #copyIndex, [], {#destination: destination, #scopes: scopes}),
              returnValue: Future<_i2.AlgoliaTask>.value(_FakeAlgoliaTask_10()))
          as _i3.Future<_i2.AlgoliaTask>);
  @override
  _i3.Future<_i2.AlgoliaTask> replaceAllObjects(
          List<Map<String, dynamic>>? objects) =>
      (super.noSuchMethod(Invocation.method(#replaceAllObjects, [objects]),
              returnValue: Future<_i2.AlgoliaTask>.value(_FakeAlgoliaTask_10()))
          as _i3.Future<_i2.AlgoliaTask>);
  @override
  _i3.Future<_i2.AlgoliaTask> deleteIndex() =>
      (super.noSuchMethod(Invocation.method(#deleteIndex, []),
              returnValue: Future<_i2.AlgoliaTask>.value(_FakeAlgoliaTask_10()))
          as _i3.Future<_i2.AlgoliaTask>);
  @override
  _i2.AlgoliaIndexReference reference() =>
      (super.noSuchMethod(Invocation.method(#reference, []),
              returnValue: _FakeAlgoliaIndexReference_2())
          as _i2.AlgoliaIndexReference);
  @override
  _i3.Future<_i2.AlgoliaQuerySnapshot> getObjects() =>
      (super.noSuchMethod(Invocation.method(#getObjects, []),
              returnValue: Future<_i2.AlgoliaQuerySnapshot>.value(
                  _FakeAlgoliaQuerySnapshot_4()))
          as _i3.Future<_i2.AlgoliaQuerySnapshot>);
  @override
  _i3.Future<_i2.AlgoliaQuerySnapshot> deleteObjects() =>
      (super.noSuchMethod(Invocation.method(#deleteObjects, []),
              returnValue: Future<_i2.AlgoliaQuerySnapshot>.value(
                  _FakeAlgoliaQuerySnapshot_4()))
          as _i3.Future<_i2.AlgoliaQuerySnapshot>);
  @override
  _i2.AlgoliaQuery search(String? value) =>
      (super.noSuchMethod(Invocation.method(#search, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery query(String? value) =>
      (super.noSuchMethod(Invocation.method(#query, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSimilarQuery(String? value) =>
      (super.noSuchMethod(Invocation.method(#setSimilarQuery, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery similarQuery(String? value) =>
      (super.noSuchMethod(Invocation.method(#similarQuery, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSearchableAttributes(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setSearchableAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributesForFaceting(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributesForFaceting, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setUnRetrievableAttributes(List<String>? value) => (super
      .noSuchMethod(Invocation.method(#setUnRetrievableAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributesToRetrieve(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributesToRetrieve, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRestrictSearchableAttributes(List<String>? value) =>
      (super.noSuchMethod(
          Invocation.method(#setRestrictSearchableAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFilters(String? value) =>
      (super.noSuchMethod(Invocation.method(#setFilters, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery filters(String? value) =>
      (super.noSuchMethod(Invocation.method(#filters, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFacetFilter(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setFacetFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery facetFilter(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#facetFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setOptionalFilter(String? value) =>
      (super.noSuchMethod(Invocation.method(#setOptionalFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setNumericFilter(String? value) =>
      (super.noSuchMethod(Invocation.method(#setNumericFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setTagFilter(String? value) =>
      (super.noSuchMethod(Invocation.method(#setTagFilter, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSumOrFiltersScore(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setSumOrFiltersScore, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFacets(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setFacets, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMaxValuesPerFacet(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMaxValuesPerFacet, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFacetingAfterDistinct({bool? enable = true}) =>
      (super.noSuchMethod(
          Invocation.method(#setFacetingAfterDistinct, [], {#enable: enable}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSortFacetValuesBy(_i2.AlgoliaSortFacetValuesBy? value) =>
      (super.noSuchMethod(Invocation.method(#setSortFacetValuesBy, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributesToHighlight(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributesToHighlight, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributesToSnippet(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributesToSnippet, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setHighlightPreTag(String? value) =>
      (super.noSuchMethod(Invocation.method(#setHighlightPreTag, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setHighlightPostTag(String? value) =>
      (super.noSuchMethod(Invocation.method(#setHighlightPostTag, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSnippetEllipsisText(String? value) =>
      (super.noSuchMethod(Invocation.method(#setSnippetEllipsisText, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRestrictHighlightAndSnippetArrays(
          {bool? enable = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setRestrictHighlightAndSnippetArrays, [], {#enable: enable}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setPage(int? value) =>
      (super.noSuchMethod(Invocation.method(#setPage, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setHitsPerPage(int? value) =>
      (super.noSuchMethod(Invocation.method(#setHitsPerPage, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setOffset(int? value) =>
      (super.noSuchMethod(Invocation.method(#setOffset, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setLength(int? value) =>
      (super.noSuchMethod(Invocation.method(#setLength, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setPaginationLimitedTo(int? value) =>
      (super.noSuchMethod(Invocation.method(#setPaginationLimitedTo, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMinWordSizeFor1Typo(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMinWordSizeFor1Typo, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMinWordSizeFor2Typos(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMinWordSizeFor2Typos, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setTypoTolerance(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setTypoTolerance, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAllowTyposOnNumericTokens(bool? value) => (super
      .noSuchMethod(Invocation.method(#setAllowTyposOnNumericTokens, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDisableTypoToleranceOnAttributes(List<String>? value) =>
      (super.noSuchMethod(
          Invocation.method(#setDisableTypoToleranceOnAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDisableTypoToleranceOnWords(List<String>? value) => (super
      .noSuchMethod(Invocation.method(#setDisableTypoToleranceOnWords, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSeparatorsToIndex(String? value) =>
      (super.noSuchMethod(Invocation.method(#setSeparatorsToIndex, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAroundLatLng(String? value) =>
      (super.noSuchMethod(Invocation.method(#setAroundLatLng, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAroundLatLngViaIP(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setAroundLatLngViaIP, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAroundRadius(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setAroundRadius, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAroundPrecision(int? value) =>
      (super.noSuchMethod(Invocation.method(#setAroundPrecision, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMinimumAroundRadius(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMinimumAroundRadius, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setInsideBoundingBox(List<_i2.BoundingBox>? value) =>
      (super.noSuchMethod(Invocation.method(#setInsideBoundingBox, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setInsidePolygon(List<_i2.BoundingPolygonBox>? value) =>
      (super.noSuchMethod(Invocation.method(#setInsidePolygon, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setIgnorePlurals(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setIgnorePlurals, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRemoveStopWords(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setRemoveStopWords, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setCamelCaseAttributes(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setCamelCaseAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDecompoundedAttributes(dynamic value) => (super
      .noSuchMethod(Invocation.method(#setDecompoundedAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setkeepDiacriticsOnCharacters(String? value) => (super
      .noSuchMethod(Invocation.method(#setkeepDiacriticsOnCharacters, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setQueryLanguages(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setQueryLanguages, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setIndexLanguages(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setIndexLanguages, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setNaturalLanguages(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setNaturalLanguages, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setEnableRules({bool? enabled = false}) => (super
      .noSuchMethod(Invocation.method(#setEnableRules, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setFilterPromotes({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setFilterPromotes, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRuleContexts(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setRuleContexts, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setEnablePersonalization({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setEnablePersonalization, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setPersonalizationImpact({int? value}) =>
      (super.noSuchMethod(
          Invocation.method(#setPersonalizationImpact, [], {#value: value}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setUserToken(String? value) =>
      (super.noSuchMethod(Invocation.method(#setUserToken, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setQueryType(_i2.QueryType? value) =>
      (super.noSuchMethod(Invocation.method(#setQueryType, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setRemoveWordsIfNoResults(
          _i2.RemoveWordsIfNoResults? value) =>
      (super.noSuchMethod(
          Invocation.method(#setRemoveWordsIfNoResults, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAdvancedSyntax({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setAdvancedSyntax, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setOptionalWords(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setOptionalWords, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDisablePrefixOnAttributes(List<String>? value) => (super
      .noSuchMethod(Invocation.method(#setDisablePrefixOnAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDisableExactOnAttributes(List<String>? value) => (super
      .noSuchMethod(Invocation.method(#setDisableExactOnAttributes, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setExactOnSingleWordQuery(
          _i2.ExactOnSingleWordQuery? value) =>
      (super.noSuchMethod(
          Invocation.method(#setExactOnSingleWordQuery, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setNumericAttributesForFiltering({List<String>? value}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setNumericAttributesForFiltering, [], {#value: value}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAllowCompressionOfIntegerArray({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setAllowCompressionOfIntegerArray, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributeForDistinct(String? value) =>
      (super.noSuchMethod(Invocation.method(#setAttributeForDistinct, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setDistinct({dynamic value = 0}) =>
      (super.noSuchMethod(Invocation.method(#setDistinct, [], {#value: value}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setGetRankingInfo({bool? enabled = true}) =>
      (super.noSuchMethod(
          Invocation.method(#setGetRankingInfo, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setClickAnalytics({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setClickAnalytics, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAnalytics({bool? enabled = false}) => (super.noSuchMethod(
      Invocation.method(#setAnalytics, [], {#enabled: enabled}),
      returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAnalyticsTags(List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setAnalyticsTags, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setSynonyms({bool? enabled = false}) => (super.noSuchMethod(
      Invocation.method(#setSynonyms, [], {#enabled: enabled}),
      returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setReplaceSynonymsInHighlight({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setReplaceSynonymsInHighlight, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setMaxFacetHits(int? value) =>
      (super.noSuchMethod(Invocation.method(#setMaxFacetHits, [value]),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setPercentileComputation({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setPercentileComputation, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setAttributeCriteriaComputedByMinProximity(
          {bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setAttributeCriteriaComputedByMinProximity, [],
              {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
  @override
  _i2.AlgoliaQuery setEnableABTest({bool? enabled = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setEnableABTest, [], {#enabled: enabled}),
          returnValue: _FakeAlgoliaQuery_5()) as _i2.AlgoliaQuery);
}

/// A class which mocks [AlgoliaQuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlgoliaQuerySnapshot extends _i1.Mock
    implements _i2.AlgoliaQuerySnapshot {
  MockAlgoliaQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Algolia get algolia => (super.noSuchMethod(Invocation.getter(#algolia),
      returnValue: _FakeAlgolia_0()) as _i2.Algolia);
  @override
  String get index =>
      (super.noSuchMethod(Invocation.getter(#index), returnValue: '')
          as String);
  @override
  List<_i2.AlgoliaObjectSnapshot> get hits =>
      (super.noSuchMethod(Invocation.getter(#hits),
              returnValue: <_i2.AlgoliaObjectSnapshot>[])
          as List<_i2.AlgoliaObjectSnapshot>);
  @override
  String get params =>
      (super.noSuchMethod(Invocation.getter(#params), returnValue: '')
          as String);
  @override
  String get query =>
      (super.noSuchMethod(Invocation.getter(#query), returnValue: '')
          as String);
  @override
  bool get empty =>
      (super.noSuchMethod(Invocation.getter(#empty), returnValue: false)
          as bool);
  @override
  bool get hasHits =>
      (super.noSuchMethod(Invocation.getter(#hasHits), returnValue: false)
          as bool);
  @override
  int get hitsPerPage =>
      (super.noSuchMethod(Invocation.getter(#hitsPerPage), returnValue: 0)
          as int);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  int get nbHits =>
      (super.noSuchMethod(Invocation.getter(#nbHits), returnValue: 0) as int);
  @override
  int get nbPages =>
      (super.noSuchMethod(Invocation.getter(#nbPages), returnValue: 0) as int);
  @override
  int get offset =>
      (super.noSuchMethod(Invocation.getter(#offset), returnValue: 0) as int);
  @override
  int get page =>
      (super.noSuchMethod(Invocation.getter(#page), returnValue: 0) as int);
  @override
  Map<String, dynamic> get facets =>
      (super.noSuchMethod(Invocation.getter(#facets),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  Map<String, dynamic> get facetsStats =>
      (super.noSuchMethod(Invocation.getter(#facetsStats),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  bool get exhaustiveNbHits =>
      (super.noSuchMethod(Invocation.getter(#exhaustiveNbHits),
          returnValue: false) as bool);
  @override
  int get processingTimeMS =>
      (super.noSuchMethod(Invocation.getter(#processingTimeMS), returnValue: 0)
          as int);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  Map<String, dynamic> raw() => (super.noSuchMethod(Invocation.method(#raw, []),
      returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
