// Mocks generated by Mockito 5.2.0 from annotations
// in shopify_client/test/application/favouirtes_actor/favourites_actor_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:kt_dart/kt.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shopify_client/domain/favourites/favourites_facade.dart' as _i3;
import 'package:shopify_domain/core/value_objects.dart' as _i6;
import 'package:shopify_domain/favourites/favourite_failure.dart' as _i5;
import 'package:shopify_domain/favourites/favourite_product.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [IFavouritesFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFavouritesFacade extends _i1.Mock implements _i3.IFavouritesFacade {
  MockIFavouritesFacade() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FavouriteFailure, _i2.Unit>> addToFavourites(
          _i6.UniqueId? productId) =>
      (super.noSuchMethod(Invocation.method(#addToFavourites, [productId]),
          returnValue: Future<_i2.Either<_i5.FavouriteFailure, _i2.Unit>>.value(
              _FakeEither_0<_i5.FavouriteFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.FavouriteFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.FavouriteFailure, _i2.Unit>> removeFromFavourites(
          _i6.UniqueId? productId) =>
      (super.noSuchMethod(Invocation.method(#removeFromFavourites, [productId]),
          returnValue: Future<_i2.Either<_i5.FavouriteFailure, _i2.Unit>>.value(
              _FakeEither_0<_i5.FavouriteFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.FavouriteFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.FavouriteFailure, bool>> isFavourite(
          _i6.UniqueId? productId) =>
      (super.noSuchMethod(Invocation.method(#isFavourite, [productId]),
              returnValue: Future<_i2.Either<_i5.FavouriteFailure, bool>>.value(
                  _FakeEither_0<_i5.FavouriteFailure, bool>()))
          as _i4.Future<_i2.Either<_i5.FavouriteFailure, bool>>);
  @override
  _i4.Stream<_i2.Either<_i5.FavouriteFailure, _i7.KtList<_i8.FavouriteProduct>>>
      watchFavourites() => (super.noSuchMethod(
          Invocation.method(#watchFavourites, []),
          returnValue: Stream<
              _i2.Either<_i5.FavouriteFailure,
                  _i7.KtList<_i8.FavouriteProduct>>>.empty()) as _i4
          .Stream<_i2.Either<_i5.FavouriteFailure, _i7.KtList<_i8.FavouriteProduct>>>);
}
