// Mocks generated by Mockito 5.2.0 from annotations
// in shopify_client/test/infrastructure/core/location_facade_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shopify_domain/core/address.dart' as _i8;
import 'package:shopify_domain/core/location/location.dart' as _i4;
import 'package:shopify_domain/core/location/location_failure.dart' as _i7;
import 'package:shopify_domain/core/location/shopify_location_facade.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeLatLng_1 extends _i1.Fake implements _i3.LatLng {}

class _Fake$LocationCopyWith_2<$Res> extends _i1.Fake
    implements _i4.$LocationCopyWith<$Res> {}

/// A class which mocks [ShopifyLocationFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopifyLocationFacade extends _i1.Mock
    implements _i5.ShopifyLocationFacade {
  MockShopifyLocationFacade() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.LocationFailure, _i4.Location>>
      getCurrentLocation() => (super.noSuchMethod(
              Invocation.method(#getCurrentLocation, []),
              returnValue:
                  Future<_i2.Either<_i7.LocationFailure, _i4.Location>>.value(
                      _FakeEither_0<_i7.LocationFailure, _i4.Location>()))
          as _i6.Future<_i2.Either<_i7.LocationFailure, _i4.Location>>);
  @override
  _i6.Future<_i2.Either<_i7.LocationFailure, _i4.Location>> getUserLocation() =>
      (super.noSuchMethod(Invocation.method(#getUserLocation, []),
              returnValue:
                  Future<_i2.Either<_i7.LocationFailure, _i4.Location>>.value(
                      _FakeEither_0<_i7.LocationFailure, _i4.Location>()))
          as _i6.Future<_i2.Either<_i7.LocationFailure, _i4.Location>>);
  @override
  _i6.Future<_i2.Either<_i7.LocationFailure, _i4.Location>>
      getLocationFromAddress(_i8.Address? address) => (super.noSuchMethod(
              Invocation.method(#getLocationFromAddress, [address]),
              returnValue:
                  Future<_i2.Either<_i7.LocationFailure, _i4.Location>>.value(
                      _FakeEither_0<_i7.LocationFailure, _i4.Location>()))
          as _i6.Future<_i2.Either<_i7.LocationFailure, _i4.Location>>);
  @override
  _i6.Future<_i2.Either<_i7.LocationFailure, _i4.Location>>
      getLocationFromString(String? input) => (super.noSuchMethod(
              Invocation.method(#getLocationFromString, [input]),
              returnValue:
                  Future<_i2.Either<_i7.LocationFailure, _i4.Location>>.value(
                      _FakeEither_0<_i7.LocationFailure, _i4.Location>()))
          as _i6.Future<_i2.Either<_i7.LocationFailure, _i4.Location>>);
  @override
  _i6.Future<_i2.Either<_i7.LocationFailure, _i2.Unit>> setUserAddress(
          _i8.Address? address) =>
      (super.noSuchMethod(Invocation.method(#setUserAddress, [address]),
          returnValue: Future<_i2.Either<_i7.LocationFailure, _i2.Unit>>.value(
              _FakeEither_0<_i7.LocationFailure, _i2.Unit>())) as _i6
          .Future<_i2.Either<_i7.LocationFailure, _i2.Unit>>);
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i4.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LatLng get latLng => (super.noSuchMethod(Invocation.getter(#latLng),
      returnValue: _FakeLatLng_1()) as _i3.LatLng);
  @override
  double get latitude =>
      (super.noSuchMethod(Invocation.getter(#latitude), returnValue: 0.0)
          as double);
  @override
  double get longitude =>
      (super.noSuchMethod(Invocation.getter(#longitude), returnValue: 0.0)
          as double);
  @override
  String get geohash =>
      (super.noSuchMethod(Invocation.getter(#geohash), returnValue: '')
          as String);
  @override
  _i4.$LocationCopyWith<_i4.Location> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$LocationCopyWith_2<_i4.Location>())
          as _i4.$LocationCopyWith<_i4.Location>);
}
