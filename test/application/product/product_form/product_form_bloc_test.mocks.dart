// Mocks generated by Mockito 5.1.0 from annotations
// in shopify_manager/test/application/product/product_form/product_form_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:kt_dart/kt.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shopify_manager/domain/auth/auth_failure.dart' as _i7;
import 'package:shopify_manager/domain/auth/i_auth_facade.dart' as _i5;
import 'package:shopify_manager/domain/auth/user.dart' as _i6;
import 'package:shopify_manager/domain/auth/value_objects.dart' as _i8;
import 'package:shopify_manager/domain/core/images/photo.dart' as _i17;
import 'package:shopify_manager/domain/product/i_product_repository.dart'
    as _i9;
import 'package:shopify_manager/domain/product/product.dart' as _i12;
import 'package:shopify_manager/domain/product/product_failure.dart' as _i10;
import 'package:shopify_manager/domain/product/product_form.dart' as _i13;
import 'package:shopify_manager/domain/shop/i_shop_repository.dart' as _i15;
import 'package:shopify_manager/domain/shop/shop.dart' as _i14;
import 'package:shopify_manager/domain/shop/shop_failure.dart' as _i16;
import 'package:shopify_manager/infrastructure/core/network/network_info.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeOption_0<A> extends _i1.Fake implements _i2.Option<A> {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [IAuthFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthFacade extends _i1.Mock implements _i5.IAuthFacade {
  MockIAuthFacade() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Option<_i6.ShopifyUser>> getSignedInUser() =>
      (super.noSuchMethod(Invocation.method(#getSignedInUser, []),
              returnValue: Future<_i2.Option<_i6.ShopifyUser>>.value(
                  _FakeOption_0<_i6.ShopifyUser>()))
          as _i4.Future<_i2.Option<_i6.ShopifyUser>>);
  @override
  _i4.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>
      registerWithEmailAndPassword(
              {_i8.EmailAddress? emailAddress, _i8.Password? password}) =>
          (super.noSuchMethod(
              Invocation.method(#registerWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i7.AuthFailure, _i2.Unit>())) as _i4
              .Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>> signInWithEmailAndPassword(
          {_i8.EmailAddress? emailAddress, _i8.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i7.AuthFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i7.AuthFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [IProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProductRepository extends _i1.Mock
    implements _i9.IProductRepository {
  MockIProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i10.ProductFailure, _i11.KtList<_i12.Product>>>
      watchAll() => (super.noSuchMethod(Invocation.method(#watchAll, []),
          returnValue: Stream<
              _i2.Either<_i10.ProductFailure,
                  _i11.KtList<_i12.Product>>>.empty()) as _i4
          .Stream<_i2.Either<_i10.ProductFailure, _i11.KtList<_i12.Product>>>);
  @override
  _i4.Stream<_i2.Either<_i10.ProductFailure, _i11.KtList<_i12.Product>>>
      watchNearby() => (super.noSuchMethod(Invocation.method(#watchNearby, []),
          returnValue: Stream<
              _i2.Either<_i10.ProductFailure,
                  _i11.KtList<_i12.Product>>>.empty()) as _i4
          .Stream<_i2.Either<_i10.ProductFailure, _i11.KtList<_i12.Product>>>);
  @override
  _i4.Future<_i2.Either<_i10.ProductFailure, _i2.Unit>> create(
          _i13.ProductForm? productForm) =>
      (super.noSuchMethod(Invocation.method(#create, [productForm]),
          returnValue: Future<_i2.Either<_i10.ProductFailure, _i2.Unit>>.value(
              _FakeEither_1<_i10.ProductFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i10.ProductFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i10.ProductFailure, _i2.Unit>> createForShop(
          _i13.ProductForm? productForm, _i14.Shop? shop) =>
      (super.noSuchMethod(
          Invocation.method(#createForShop, [productForm, shop]),
          returnValue: Future<_i2.Either<_i10.ProductFailure, _i2.Unit>>.value(
              _FakeEither_1<_i10.ProductFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i10.ProductFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i10.ProductFailure, _i2.Unit>> update(
          _i12.Product? product) =>
      (super.noSuchMethod(Invocation.method(#update, [product]),
          returnValue: Future<_i2.Either<_i10.ProductFailure, _i2.Unit>>.value(
              _FakeEither_1<_i10.ProductFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i10.ProductFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i10.ProductFailure, _i2.Unit>> delete(
          _i12.Product? product) =>
      (super.noSuchMethod(Invocation.method(#delete, [product]),
          returnValue: Future<_i2.Either<_i10.ProductFailure, _i2.Unit>>.value(
              _FakeEither_1<_i10.ProductFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i10.ProductFailure, _i2.Unit>>);
}

/// A class which mocks [IShopRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIShopRepository extends _i1.Mock implements _i15.IShopRepository {
  MockIShopRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i16.ShopFailure, _i11.KtList<_i14.Shop>>> watchAll() =>
      (super.noSuchMethod(Invocation.method(#watchAll, []),
              returnValue: Stream<
                  _i2.Either<_i16.ShopFailure, _i11.KtList<_i14.Shop>>>.empty())
          as _i4.Stream<_i2.Either<_i16.ShopFailure, _i11.KtList<_i14.Shop>>>);
  @override
  _i4.Stream<_i2.Either<_i16.ShopFailure, _i11.KtList<_i14.Shop>>>
      watchNearby() => (super.noSuchMethod(Invocation.method(#watchNearby, []),
              returnValue: Stream<
                  _i2.Either<_i16.ShopFailure, _i11.KtList<_i14.Shop>>>.empty())
          as _i4.Stream<_i2.Either<_i16.ShopFailure, _i11.KtList<_i14.Shop>>>);
  @override
  _i4.Future<_i2.Either<_i16.ShopFailure, _i2.Unit>> create(
          _i14.Shop? shop, _i17.ShopLogo? logo) =>
      (super.noSuchMethod(Invocation.method(#create, [shop, logo]),
              returnValue: Future<_i2.Either<_i16.ShopFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i16.ShopFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i16.ShopFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i16.ShopFailure, _i2.Unit>> update(_i14.Shop? shop) =>
      (super.noSuchMethod(Invocation.method(#update, [shop]),
              returnValue: Future<_i2.Either<_i16.ShopFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i16.ShopFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i16.ShopFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i16.ShopFailure, _i2.Unit>> delete(_i14.Shop? shop) =>
      (super.noSuchMethod(Invocation.method(#delete, [shop]),
              returnValue: Future<_i2.Either<_i16.ShopFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i16.ShopFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i16.ShopFailure, _i2.Unit>>);
}
