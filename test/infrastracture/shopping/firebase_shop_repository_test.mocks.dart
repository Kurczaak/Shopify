// Mocks generated by Mockito 5.0.17 from annotations
// in shopify_manager/test/infrastracture/shopping/firebase_shop_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:typed_data' as _i11;

import 'package:cloud_firestore/cloud_firestore.dart' as _i5;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i2;
import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shopify_manager/domain/auth/auth_failure.dart' as _i9;
import 'package:shopify_manager/domain/auth/i_auth_facade.dart' as _i6;
import 'package:shopify_manager/domain/auth/user.dart' as _i8;
import 'package:shopify_manager/domain/auth/value_objects.dart' as _i10;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeOption_0<A> extends _i1.Fake implements _i2.Option<A> {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeFirebaseApp_2 extends _i1.Fake implements _i3.FirebaseApp {}

class _FakeSettings_3 extends _i1.Fake implements _i4.Settings {}

class _FakeCollectionReference_4<T extends Object?> extends _i1.Fake
    implements _i5.CollectionReference<T> {}

class _FakeWriteBatch_5 extends _i1.Fake implements _i5.WriteBatch {}

class _FakeLoadBundleTask_6 extends _i1.Fake implements _i5.LoadBundleTask {}

class _FakeQuerySnapshot_7<T extends Object?> extends _i1.Fake
    implements _i5.QuerySnapshot<T> {}

class _FakeQuery_8<T extends Object?> extends _i1.Fake implements _i5.Query<T> {
}

class _FakeDocumentReference_9<T extends Object?> extends _i1.Fake
    implements _i5.DocumentReference<T> {}

class _FakeFirebaseFirestore_10 extends _i1.Fake
    implements _i5.FirebaseFirestore {}

/// A class which mocks [IAuthFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthFacade extends _i1.Mock implements _i6.IAuthFacade {
  MockIAuthFacade() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Option<_i8.ShopifyUser>> getSignedInUser() =>
      (super.noSuchMethod(Invocation.method(#getSignedInUser, []),
              returnValue: Future<_i2.Option<_i8.ShopifyUser>>.value(
                  _FakeOption_0<_i8.ShopifyUser>()))
          as _i7.Future<_i2.Option<_i8.ShopifyUser>>);
  @override
  _i7.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>
      registerWithEmailAndPassword(
              {_i10.EmailAddress? emailAddress, _i10.Password? password}) =>
          (super.noSuchMethod(
              Invocation.method(#registerWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i9.AuthFailure, _i2.Unit>())) as _i7
              .Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>);
  @override
  _i7.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>> signInWithEmailAndPassword(
          {_i10.EmailAddress? emailAddress, _i10.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i9.AuthFailure, _i2.Unit>()))
          as _i7.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>);
  @override
  _i7.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i9.AuthFailure, _i2.Unit>()))
          as _i7.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>);
  @override
  _i7.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i5.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_2()) as _i3.FirebaseApp);
  @override
  set app(_i3.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set settings(_i4.Settings? settings) =>
      super.noSuchMethod(Invocation.setter(#settings, settings),
          returnValueForMissingStub: null);
  @override
  _i4.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
      returnValue: _FakeSettings_3()) as _i4.Settings);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i5.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_4<Map<String, dynamic>>())
          as _i5.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.WriteBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeWriteBatch_5()) as _i5.WriteBatch);
  @override
  _i7.Future<void> clearPersistence() =>
      (super.noSuchMethod(Invocation.method(#clearPersistence, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> enablePersistence(
          [_i4.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#enablePersistence, [persistenceSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i5.LoadBundleTask loadBundle(_i11.Uint8List? bundle) =>
      (super.noSuchMethod(Invocation.method(#loadBundle, [bundle]),
          returnValue: _FakeLoadBundleTask_6()) as _i5.LoadBundleTask);
  @override
  void useFirestoreEmulator(String? host, int? port,
          {bool? sslEnabled = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #useFirestoreEmulator, [host, port], {#sslEnabled: sslEnabled}),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i5.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
          String? name,
          {_i4.GetOptions? options = const _i4.GetOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#namedQueryGet, [name], {#options: options}),
          returnValue: Future<_i5.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot_7<Map<String, dynamic>>())) as _i7
          .Future<_i5.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i5.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collectionGroup, [collectionPath]),
              returnValue: _FakeQuery_8<Map<String, dynamic>>())
          as _i5.Query<Map<String, dynamic>>);
  @override
  _i7.Future<void> disableNetwork() =>
      (super.noSuchMethod(Invocation.method(#disableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i5.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(Invocation.method(#doc, [documentPath]),
              returnValue: _FakeDocumentReference_9<Map<String, dynamic>>())
          as _i5.DocumentReference<Map<String, dynamic>>);
  @override
  _i7.Future<void> enableNetwork() =>
      (super.noSuchMethod(Invocation.method(#enableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(Invocation.method(#snapshotsInSync, []),
          returnValue: Stream<void>.empty()) as _i7.Stream<void>);
  @override
  _i7.Future<T> runTransaction<T>(_i5.TransactionHandler<T>? transactionHandler,
          {Duration? timeout = const Duration(seconds: 30)}) =>
      (super.noSuchMethod(
          Invocation.method(
              #runTransaction, [transactionHandler], {#timeout: timeout}),
          returnValue: Future<T>.value(null)) as _i7.Future<T>);
  @override
  _i7.Future<void> terminate() =>
      (super.noSuchMethod(Invocation.method(#terminate, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> waitForPendingWrites() =>
      (super.noSuchMethod(Invocation.method(#waitForPendingWrites, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i5.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i5.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_10()) as _i5.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i7.Future<_i5.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue: Future<_i5.DocumentReference<T>>.value(
                  _FakeDocumentReference_9<T>()))
          as _i7.Future<_i5.DocumentReference<T>>);
  @override
  _i5.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
      Invocation.method(#doc, [path]),
      returnValue: _FakeDocumentReference_9<T>()) as _i5.DocumentReference<T>);
  @override
  _i5.CollectionReference<R> withConverter<R extends Object?>(
          {_i5.FromFirestore<R>? fromFirestore,
          _i5.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeCollectionReference_4<R>())
          as _i5.CollectionReference<R>);
  @override
  _i5.Query<T> endAtDocument(_i5.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> endBeforeDocument(
          _i5.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#endBeforeDocument, [documentSnapshot]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> endBefore(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endBefore, [values]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i7.Future<_i5.QuerySnapshot<T>> get([_i4.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue:
                  Future<_i5.QuerySnapshot<T>>.value(_FakeQuerySnapshot_7<T>()))
          as _i7.Future<_i5.QuerySnapshot<T>>);
  @override
  _i5.Query<T> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> limitToLast(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limitToLast, [limit]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i7.Stream<_i5.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i5.QuerySnapshot<T>>.empty())
          as _i7.Stream<_i5.QuerySnapshot<T>>);
  @override
  _i5.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
          Invocation.method(#orderBy, [field], {#descending: descending}),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> startAfterDocument(
          _i5.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#startAfterDocument, [documentSnapshot]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> startAfter(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAfter, [values]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> startAtDocument(
          _i5.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#startAtDocument, [documentSnapshot]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
  @override
  _i5.Query<T> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
          Invocation.method(#where, [
            field
          ], {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull
          }),
          returnValue: _FakeQuery_8<T>()) as _i5.Query<T>);
}
